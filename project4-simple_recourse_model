{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"name":"Project 4 SR Reference.ipynb","provenance":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"zSf0zxukK6bz"},"source":["# ISE-533 Project 4: Allocation Problem for COVID-19 Ventilators\n","## Forecast with Uncertainty - Simple Recourse Model\n","\n","By: Jacob Andreesen, Jeff Chen, Miao Xu, Yiyi Wang"]},{"cell_type":"code","metadata":{"id":"nU5ULYslK6b3"},"source":["import os\n","import numpy as np\n","import pandas as pd\n","import math\n","from pyomo.environ import *\n","from collections import defaultdict\n","import pyomo.environ as pyo\n","from pyomo.opt import SolverFactory\n","from datetime import timedelta\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZD8ZAxSeK6b3"},"source":["raw = pd.read_csv('project 4 dataset/init_data.csv', header=0, index_col=0)\n","raw"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ZtD0Zj9VK6b4"},"source":["first_date = '2020/03/25'\n","t = 7     # for a week\n","T = 14\n","P = 10\n","lbd = 0.1 # penalty\n","\n","S = 51    # 50 states and SNS\n","states_name = raw['State']\n","SNS_stock = 12000\n","\n","init_ratio = 0.8        # 0.6 of the stock is used for covid-19\n","flow_bound_ratio = 0.3  #0.2, 0.25, 0.3\n","stock_bound_ratio = 0.5 #0.6, 0.5"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"EMwY3tD_K6b5"},"source":["#first iteration values\n","data = raw.rename(columns={'Available capacity': \"stock_self\"})\n","data = data[:-1]\n","data['stock_self'] = init_ratio * data['stock_self']\n","data['stock_nb'] = None\n","for i in range(S):\n","    data.loc[i, 'stock_nb'] = str([0 for _ in eval(data.loc[i, 'nb'])])\n","data['stock_sns'] = [0 for _ in range(S)]"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"clWSz2HcK6b5"},"source":["idx = 0\n","flow_mapping = {}\n","flow_mapping_rev = {}\n","stocks = {}\n","out_flow = defaultdict(list)\n","in_flow = defaultdict(list)\n","\n","for i in range(S):\n","    nbs = eval(data.iloc[i, 3])\n","    out_flow[i] = nbs\n","    stocks[i ,i] = data['stock_self'][i]\n","    for n in nbs:\n","        stocks[i, n] = 0\n","        flow_mapping[(i, n)] = idx\n","        flow_mapping_rev[idx] = (i, n)\n","        in_flow[n].append(i)\n","        idx += 1\n","\n","in_flow[51] = []\n","out_flow[51] = list(range(51))\n","for n in range(S):\n","    stocks[51, n] = 0\n","    flow_mapping[(51, n)] = idx\n","    flow_mapping_rev[idx] = (51, n)\n","    idx += 1"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Pc7c61bCK6b6"},"source":["stocks[51, 51] = SNS_stock "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"PFL-lXarK6b6"},"source":["def first_stage(stocks:dict):\n","    model = ConcreteModel()\n","\n","    \n","    #Sets\n","    F = idx\n","    model.time_set = list(range(t))\n","    model.state_set = list(range(S))\n","    model.state_p_set = list(range(S + 1))\n","    model.flow_set = list(range(F))\n","    \n","    # Parameters\n","    model.demand = Param(model.state_set, model.time_set, within=NonNegativeReals, mutable=True)\n","\n","    model.U = [round(flow_bound_ratio * stocks[i, i]) for i in model.state_p_set]\n","    model.G = [round(stock_bound_ratio * stocks[i, i]) for i in model.state_p_set]\n","    \n","    \n","    # Variables\n","    model.s = Var(model.state_p_set, within=NonNegativeReals) # s_jj\n","    model.s_nb = Var(model.flow_set, within=NonNegativeReals) # s_ij\n","    model.x = Var(model.flow_set, within=NonNegativeReals)    # x_ij\n","    \n","    \n","    # Objective\n","    model.first = Var(within = NonNegativeReals)\n","    model.second = Var(within = NonNegativeReals)\n","    model.first_penalty = Constraint(expr = model.first == lbd * summation(model.s_nb))\n","    \n","    model.cost = Objective(expr = model.first + model.second, sense = minimize)\n","    \n","    \n","    # Constraints\n","    model.stock_self = Constraint(model.state_set, rule=lambda model, j: \\\n","                                  model.s[j] + sum(model.x[flow_mapping[j, i]] for i in out_flow[j]) - model.x[flow_mapping[51, j]]== \\\n","                                  stocks[j, j])\n","    model.stock_SNS_self = Constraint(expr = \\\n","                                      model.s[51] + sum(model.x[flow_mapping[(51, j)]] for j in out_flow[51]) == \\\n","                                      stocks[51, 51])\n","\n","    model.stock_nb = ConstraintList()\n","    for j in model.state_set:\n","        for i in in_flow[j]:\n","            model.stock_nb.add(model.s_nb[flow_mapping[i,j]] - model.x[flow_mapping[i,j]] == stocks[i,j])\n","            \n","    model.s_bound = Constraint(model.state_p_set, rule=lambda model, j: model.s[j] >= model.G[j])\n","    \n","    model.x_bound = ConstraintList()\n","    for i in model.state_p_set:\n","        for j in out_flow[i]:\n","            model.x_bound.add(model.x[flow_mapping[i,j]] <= model.U[i])\n","            model.x_bound.add(-stocks[i,j] <= model.x[flow_mapping[i,j]])\n","            \n","    model.benders_cuts = ConstraintList()\n","    \n","    \n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ts82ID9JK6b8"},"source":["def second_stage(demands:list, u:float):\n","    model = ConcreteModel()\n","    \n","    # Parameters\n","    model.time_set = list(range(t))\n","    \n","    # Variables\n","    model.delta = Var(model.time_set, within=NonNegativeReals)\n","    model.dual = Suffix(direction=Suffix.IMPORT)\n","    \n","    # Objective\n","    model.obj = Objective(expr = summation(model.delta), sense = minimize)\n","    \n","    # Constraint\n","    model.delta_bound = ConstraintList()\n","    for day in model.time_set:\n","        model.delta_bound.add(expr = model.delta[day] >= demands[day] - u)\n","        model.delta_bound.add(expr = model.delta[day] >= 0)\n","        \n","    return model"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Jckgyi_dK6b9"},"source":["def benders(date, stocks, max_iteration = 200):\n","    opt = SolverFactory('glpk')\n","    master = first_stage(stocks)\n","    \n","    iter = 0\n","    \n","    lower = -float(\"inf\")\n","    upper = float(\"inf\")\n","    \n","    while iter < max_iteration:\n","        iter += 1\n","        # print(\"iteration\", iter)\n","        \n","        opt.solve(master)\n","        lower = max(lower, master.cost.expr())\n","        # print(\"Lower Bound:\", lower)\n","        \n","        if upper - lower <= 0.001:\n","            print(\"Converged\")\n","            break\n","            \n","        x = master.x.get_values()   # x_ij\n","        s = master.s.get_values()   # s_jj\n","        s_nb = master.s_nb.get_values()   # s_ij\n","        \n","        sub_bound = 0\n","        sub_duals = defaultdict(int)\n","        benders_cut_constant = 0\n","        \n","        for j in range(S):\n","            state = states_name[j]\n","            state_demand = pd.read_csv(\"project 4 dataset/prediction/{}/{}.csv\".format(date.strftime('%m%d'), state))\n","            \n","            path = [state_demand['InvVen_mean'], state_demand['InvVen_upper'], state_demand['InvVen_lower']]\n","            \n","            u = s[j] + sum(s_nb[flow_mapping[i, j]] for i in in_flow[j])\n","\n","            for d in path:\n","                demands = d.iloc[:7]  \n","                \n","                sub = second_stage(demands, u)\n","                opt.solve(sub)\n","                \n","                duals = []\n","                \n","                for day in range(1, 1 + t):\n","                    duals.append(sub.dual[sub.delta_bound[day]])\n","                    \n","            sub_duals[j] += sum(duals)/3\n","            benders_cut_constant += sum([demand * dual for demand, dual in zip(demands, duals)])/3\n","            sub_bound += sub.obj.expr()/3\n","\n","                \n","        sub_bound += lbd * sum(s_nb[j] for j in range(idx-S))\n","        upper = min(upper, sub_bound)\n","        # print(\"Upper Bound:\", upper)\n","        \n","        # Add benders cuts\n","        master.benders_cuts.add(expr = master.cost >= lbd * sum(master.s_nb[flow] for flow in range(idx-S)) - \\\n","                               sum(sub_duals[j] * (sum(master.s_nb[flow_mapping[i,j]] for i in in_flow[j]) + \\\n","                                                  master.s[j]) for j in range(S)) + \\\n","                                benders_cut_constant)\n","        \n","    return master"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"LstF7h0jK6b_"},"source":["### Allocation For 10 Weeks"]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Y-hEDhg-K6cA"},"source":["date = pd.to_datetime(\"2020/03/25\")\n","all_models = []\n","data_list = []\n","final = pd.DataFrame()\n","\n","for week in range(10):\n","    solved_master = benders(date, stocks, max_iteration = 20)\n","    all_models.append(solved_master)\n","    s_nb = solved_master.s_nb.get_values()\n","    s = solved_master.s.get_values()\n","    \n","    date += timedelta(7)\n","    \n","    \n","    stocks = {}\n","    for flow, index in flow_mapping_rev.items():\n","        stocks[index] = s_nb[flow]\n","    for i in range(S+1):\n","        stocks[i,i] = s[i]\n","        \n","    \n","    temp = raw.copy()\n","    nb = 0\n","    \n","    for i in range(S+1):\n","        for index, flow in flow_mapping.items():\n","            if index[0] == i:\n","               nb += stocks[index]\n","        \n","        temp.loc[i, 'Stock'] = stocks[i,i] + nb\n","    \n","    temp = temp['Stock']\n","    data_list.append(temp)\n","    \n","final = pd.concat(data_list, axis = 1).set_index(states_name)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"CkOSMu8bK6cD"},"source":["final"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"AMXHmVaNK6cE"},"source":["### Unmet Demand with Actual Demand"]},{"cell_type":"code","metadata":{"id":"lqg5WMK6K6cF"},"source":["states_name = raw['State']\n","state_demand = pd.DataFrame(columns=['date']) \n","\n","for j in range(S):\n","    state = states_name[j]\n","    temp = pd.read_csv(\"project 4 dataset/eval/{}.csv\".format(state), header=None)\n","    temp.rename(columns = {0: 'date', 1: state}, inplace = True)\n","    state_demand = state_demand.merge(temp, on='date', how='outer') "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"4jnA5baYK6cG"},"source":["state_demand = state_demand.set_index('date')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"avV7Le71K6cG"},"source":["eval = state_demand.groupby(np.arange(len(state_demand))//7).mean()\n","eval"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"_KrMVzmCK6cG"},"source":["final1 = final.copy()\n","final1 = final1.transpose()\n","final1 = final1.iloc[: , :-1]\n","final1.index = eval.index\n","final1"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tRsm8xInK6cH"},"source":["### Unmet Demand Every Week and Sum"]},{"cell_type":"code","metadata":{"id":"JxwdbcE8K6cH"},"source":["final1.to_csv('project 4 dataset/SR_supply_08_03_05.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"gJ0tWA2yK6cH"},"source":["final = pd.read_csv('project 4 dataset/SR_supply_08_03_05.csv')\n","final = final.drop(['Unnamed: 0'], axis = 1)\n","final"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Y38Nj25cK6cI"},"source":["states_name = raw['State']\n","state_demand = pd.DataFrame(columns=['date']) \n","\n","for j in range(S):\n","    state = states_name[j]\n","    temp = pd.read_csv(\"project 4 dataset/eval/{}.csv\".format(state), header=None)\n","    temp.rename(columns = {0: 'date', 1: state}, inplace = True)\n","    state_demand = state_demand.merge(temp, on='date', how='outer') \n","\n","state_demand = state_demand.set_index('date')\n","state_demand = state_demand.reset_index()\n","state_demand.head()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":true,"id":"lZ9FYUVZK6cI"},"source":["final_repeat = final.loc[final.index.repeat(7)].reset_index(drop=True)\n","final_repeat"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"scrolled":false,"id":"RlEHq_kUK6cI"},"source":["unmet_everyday = state_demand.drop(['date'], axis = 1).subtract(final_repeat)\n","unmet_everyday[unmet_everyday <= 0] = 0\n","unmet_everyweek = unmet_everyday.groupby(np.arange(len(unmet_everyday))//7).sum()\n","\n","unmet_everyweek"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"tWvJLwunK6cJ"},"source":["result_08_03_05 = pd.DataFrame(unmet_everyweek.sum(axis = 1), columns = ['Unmet Demand'])\n","result_08_03_05.index = [1,2,3,4,5,6,7,8,9,10]\n","result_08_03_05 = result_08_03_05.rename_axis('Week').reset_index()\n","result_08_03_05.to_csv('project 4 dataset/result_08_03_05.csv')\n","result_08_03_05"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"C9BziD2QK6cJ"},"source":["pd.DataFrame(result_08_03_05.sum(axis = 1), columns = ['Unmet Demand']).sum(axis = 0)"],"execution_count":null,"outputs":[]}]}